#version 400\n\
uniform mat4 u_model_mat;\n\
uniform mat4 u_mvp;\n\
uniform vec3 u_base_color;\n\
uniform float u_time;\n\
uniform vec3 u_objectPos;\n\
uniform vec3 u_eyePos;\n\
\n\
layout(location = 0) in vec3 in_vertex;\n\
layout(location = 1) in vec3 in_color;\n\
layout(location = 2) in vec2 in_texcoord;\n\
layout(location = 3) in vec3 in_normal;\n\
\n\
out vec3 f_color;\n\
out vec2 f_texcoord;\n\
\n\
out vec3 f_WorldPos;\n\
out vec3 f_ViewPos;\n\
out vec3 f_LocalPos;\n\
out vec3 f_WorldNormal;\n\
out vec3 f_LocalNormal;\n\
out vec3 f_ViewNormal;\n\
out vec3 f_vertColor1;\n\
out vec3 f_vertColor2;\n\
void main() {
    f_color = in_color;\n\
    f_texcoord = in_texcoord;\n\
    \n\
    f_LocalPos = in_vertex;\n\
    f_LocalNormal = in_normal;\n\
    f_WorldNormal = (vec4(in_vertex, 1.0) * u_model_mat).xyz;\n\
    f_WorldPos = (vec4(in_vertex, 1.0) * u_model_mat).xyz;\n\
    f_ViewNormal = (vec4(in_vertex, 1.0) * u_mvp).xyz;\n\
    f_ViewPos = (vec4(in_vertex, 1.0) * u_mvp).xyz;\n\
    \n\

    f_WorldPos += world_pos_displacement;\n\ // PLACEHOLDER FOR SETTING
    vec3 f_newModelPos = vec4(f_WorldPos, 1) * inverse(u_model_mat);\n\ // PLACEHOLDER FOR SETTING
    f_ViewPos = (vec4(f_newModelPos, 1.0) * u_mvp).xyz;\n\ // PLACEHOLDER FOR SETTING
    vert_color1 = VERTEX_COLOR_1; // PLACEHOLDER FOR SETTING
    vert_color2 = VERTEX_COLOR_2; // PLACEHOLDER FOR SETTING


    gl_Position = f_ViewPos;\n\
}


#version 400 core\n\
out vec4 FragColor;\n\
\n\
out vec3 f_color;\n\
out vec2 f_texcoord;\n\
\n\
out vec3 f_WorldPos;\n\
out vec3 f_ViewPos;\n\
out vec3 f_LocalPos;\n\
out vec3 f_WorldNormal;\n\
out vec3 f_LocalNormal;\n\
out vec3 f_ViewNormal;\n\
out vec3 f_vertColor1;\n\
out vec3 f_vertColor2;\n\
\n\
// lights\n\
uniform vec3 lightPositions[4];\n\
uniform vec3 lightColors[4];\n\
\n\
uniform vec3 u_eyePos;\n\
\n\
const float PI = 3.14159265359;\n\
// ----------------------------------------------------------------------------\n\
float DistributionGGX(vec3 N, vec3 H, float roughness)\n\
{\n\
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    \n\n\
    return nom / denom;
}\n\
// ---------------------------------------------------------------------------- \n\
float GeometrySchlickGGX(float NdotV, float roughness)\n\
{\n\
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    \n\n\
    return nom / denom;
}\n\
// ----------------------------------------------------------------------------\n\
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n\
{\n\
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);
    \n\n\
    return ggx1 * ggx2;
}\n\
// ----------------------------------------------------------------------------\n\
vec3 fresnelSchlick(float cosTheta, vec3 F0)\n\
{\n\
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\n\
}\n\
// ----------------------------------------------------------------------------\n\
\n\n\
vec3 rotate_normal_vec(vec3 rot_normal, vec3 plane_normal, vec3 tangent_normal) {\n\
    float c = dot(rot_normal, plane_normal);\n\
    if (c < -0.999999) return -tangent_normal;   \n\ 
    float s = sin(acos(c));
    vec3 x = cross(rot_normal, plane_normal);
    float i_c = (1 - c);
    float i_s = (1 - s);

    mat3 rot_mat = mat3(
        c + x.x*x.x*i_c, 
        u.x*u.y*i_c - x.z*s, 
        x.x*x.z*i_c + x.y*s,  // 1. column

        x.y*x.x*i_c + x.z*s,
        c + x.y*x.y*i_c,
        x.y*x.z*i_c + x.x*s,  // 2. column
        
        x.z*x.x*i_c - x.y*s,
        x.x*x.y*i_c + x.x*s,
        c + x.z*x.z*i_c); // 3. column
    \n\n\
    return normalize(rot_mat * tangent_normal);\n\
}\n\
\n\n\
void main()\n\
{	\n\
    // TODO : replaced with reworks
    vec3 albedo = vec3(1, 0, 1);\n\
    float metallic = 0.5;\n\
    float roughness = 0.5;\n\
    float ao = 0.3;\n\
    vec3 ts_normal = vec3(0, 1, 0);\n\
    \n\
    vec3 N = rotate_normal_vec(f_WorldNormal, vec3(0, 1, 0), ts_normal);
    vec3 V = normalize(camPos - WorldPos);

    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i) 
    {
        // calculate per-light radiance
        vec3 L = normalize(lightPositions[i] - WorldPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);   
        float G   = GeometrySmith(N, V, L, roughness);      
        vec3 F    = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
           
        vec3 numerator    = NDF * G * F; 
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
        vec3 specular = numerator / denominator;
        
        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;	  

        // scale light by NdotL
        float NdotL = max(dot(N, L), 0.0);        

        // add to outgoing radiance Lo
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    }   
    
    // ambient lighting (note that the next IBL tutorial will replace 
    // this ambient lighting with environment lighting).
    vec3 ambient = vec3(0.03) * albedo * ao;

    vec3 color = ambient + Lo;

    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);
}